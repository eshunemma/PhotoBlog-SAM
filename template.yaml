AWSTemplateFormatVersion: 2010-09-09
Description: >-
  PhotoMe
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: pr
    AllowedValues:
      - pr
      - drr
    Description: Environment name for resource naming

Globals:
  Function:
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment

Conditions:
  IsPrimaryRegion: !Equals
    - !Ref "AWS::Region"
    - eu-west-1

Resources:
  # Cognito
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "PhotoMeUserPool-${Environment}"
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
        - Name: name
          AttributeDataType: String
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub "PhotoMeAppClient-${Environment}"
      GenerateSecret: true
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - https://main.d1dz6uduz5w2pj.amplifyapp.com/dashboard
      LogoutURLs:
        - https://main.d1dz6uduz5w2pj.amplifyapp.com/signout

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "PhotoMeIdentityPool-${Environment}"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ProviderName: !GetAtt CognitoUserPool.ProviderName
          ClientId: !Ref CognitoUserPoolClient

  PhotoBucketStaging:
    Type: "AWS::S3::Bucket"
    DependsOn:
      - PhotoBucketProcessed
    Properties:
      BucketName: !Sub "photome-bucket-amalitech-staging-${Environment}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      ReplicationConfiguration: !If
        - IsPrimaryRegion
        - Role: !GetAtt ReplicationRole.Arn
          Rules:
            - Status: Enabled
              Priority: 1
              DeleteMarkerReplication:
                Status: Enabled
              Destination:
                Bucket: !Sub "arn:aws:s3:::photome-bucket-amalitech-staging-drr"
              Filter:
                Prefix: ""
        - !Ref "AWS::NoValue"

  PhotoBucketProcessed:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "photome-bucket-amalitech-processed-${Environment}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      ReplicationConfiguration: !If
        - IsPrimaryRegion
        - Role: !GetAtt ReplicationRole.Arn
          Rules:
            - Status: Enabled
              Priority: 1
              DeleteMarkerReplication:
                Status: Enabled
              Destination:
                Bucket: !Sub "arn:aws:s3:::photome-bucket-amalitech-processed-drr"
              Filter:
                Prefix: ""
        - !Ref "AWS::NoValue"

  ReplicationRole:
    Type: AWS::IAM::Role
    Condition: IsPrimaryRegion
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3ReplicationPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ReplicateObject
                  - s3:ReplicateDelete
                  - s3:GetObjectVersionForReplication
                  - s3:GetObjectVersion
                  - s3:GetObjectVersionAcl
                  - s3:GetObjectVersionTagging
                Resource:
                  - !Sub "arn:aws:s3:::photome-bucket-amalitech-staging-pr/*"
                  - !Sub "arn:aws:s3:::photome-bucket-amalitech-processed-pr/*"
                  - !Sub "arn:aws:s3:::photome-bucket-amalitech-staging-drr/*"
                  - !Sub "arn:aws:s3:::photome-bucket-amalitech-processed-drr/*"

              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetReplicationConfiguration
                Resource:
                  - !Sub "arn:aws:s3:::photome-bucket-amalitech-staging-pr"
                  - !Sub "arn:aws:s3:::photome-bucket-amalitech-processed-pr"
                  - !Sub "arn:aws:s3:::photome-bucket-amalitech-staging-drr"
                  - !Sub "arn:aws:s3:::photome-bucket-amalitech-processed-drr"

  PhotoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "photo-${Environment}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

    ## Lambda Function (Processes Image & Adds Watermark)
  # ImageProcessingLambda:
  #   Type: AWS::Serverless::Function
  #   DependsOn:
  #     - PhotoTable
  #     - PhotoBucketStaging
  #     - PhotoBucketProcessed
  #   Properties:
  #     FunctionName: !Sub ImageProcessor-${Environment}
  #     Runtime: nodejs18.x
  #     Handler: process-image.handler
  #     Timeout: 60
  #     CodeUri: src/handlers
  #     MemorySize: 512
  #     Policies:
  #       - S3ReadPolicy:
  #           BucketName: !Ref PhotoBucketStaging
  #       - S3WritePolicy:
  #           BucketName: !Ref PhotoBucketProcessed
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref PhotoTable
  #     Environment:
  #       Variables:
  #         STAGING_BUCKET: !Ref PhotoBucketStaging
  #         PROCESSED_BUCKET: !Ref PhotoBucketProcessed
  #         DYNAMODB_TABLE: !Ref PhotoTable
  #     Events:
  #       S3Event:
  #         Type: S3
  #         Properties:
  #           Bucket: !Ref PhotoBucketStaging
  #           Events: s3:ObjectCreated:*
